<odoo>
    <template id="custom_product" inherit_id="website_sale.product">
        <xpath expr="//div[@id='product_details']//div[@class='oe_structure']" position="before">
            <table>
                <div class="oe_maximum_order_qty" t-if="product.maximum_order_qty">
                    <tr>
                        <td>
                            <b>Maximum Order Quantity:</b>
                        </td>

                        <br>
                        <td id="qtyMaxId" style="color:red;padding:5px;">
                            <t t-esc="product.maximum_order_qty" />
                        </td>
                        </br>
                    </tr>
                </div>
            </table>

            <div id="errorToaster" class="error-toaster" >
                <span class="error-text">Warning </span>
            </div>
            <script type="text/javascript">

const MIN_DELAY = 100;  // Define constants for better readability
const ERROR_TOAST_TIMEOUT = 5000;

function setQuantityMin(quantityElement, minQty) {
  quantityElement.dataset.max = minQty;
  quantityElement.value = minQty;
}

function showErrorToast(message, quantity = null) {
  const errorToaster = document.getElementById('errorToaster');
  errorToaster.innerHTML = ''; // Clear previous content

  // Create the message text node
  const messageTextNode = document.createTextNode(message);
  errorToaster.appendChild(messageTextNode);

  // If quantity is provided, create a span element and append it
  if (quantity !== null) {
    const quantitySpan = document.createElement('span');
    quantitySpan.style.color = 'red';
    quantitySpan.textContent = ` ${quantity}`; // Add a space for readability
    errorToaster.appendChild(quantitySpan);

    // Append the rest of the message if needed
    const restOfMessage = document.createTextNode('.');
    errorToaster.appendChild(restOfMessage);
  }

  errorToaster.style.visibility = 'visible';
  setTimeout(() => {
    errorToaster.style.visibility = 'hidden';
  }, ERROR_TOAST_TIMEOUT);
}

setTimeout(() => {
  try {
    const quantityElements = document.querySelectorAll('.quantity');
    const cartButton = document.getElementById("add_to_cart");
    const minQty = document.getElementById("qtyMaxId").innerHTML;
    const qtyParse = parseInt(minQty, 10);

    quantityElements.forEach((quantityElement) => {
      setQuantityMin(quantityElement, qtyParse);

      quantityElement.addEventListener('blur', (event) => {
        const targetValue = parseInt(event.target.value, 10);
        if (isNaN(targetValue) || targetValue > qtyParse) {
          showErrorToast('Warning: Maximum Order Quantity is', qtyParse);
          event.target.value = qtyParse;
        }
      });
    });

    // Handle quantity subtract button click
    const subButton = document.getElementsByClassName("js_add_cart_json")[1];
    subButton.addEventListener('click', () => {
      const currentMinQty = parseInt(document.getElementsByClassName("quantity")[0].dataset.max, 10);
      const currentQty = parseInt(document.getElementsByClassName("quantity")[0].value, 10);
      if (currentMinQty === currentQty) {
        showErrorToast('Warning: Maximum Order Quantity is', currentMinQty);
      }
    });

    // Handle add to cart button click (similar logic for other buttons)
    cartButton.addEventListener('click', () => {
      setTimeout(() => {
        const quantityElements2 = document.querySelectorAll('.quantity');
        const minQty2 = document.getElementById('qtyId').innerHTML;
        const qtyParse2 = parseInt(minQty2, 10);

        quantityElements2.forEach((quantityElement) => {
          setQuantityMin(quantityElement, qtyParse2);

          quantityElement.addEventListener('blur', (event) => {
            const targetValue = parseInt(event.target.value, 10);
            if (isNaN(targetValue) || targetValue > qtyParse2) {
              showErrorToast('Warning: Maximum Order Quantity is', qtyParse2);
              event.target.value = qtyParse2;
            }
          });
        });
      }, MIN_DELAY);
    });
  } catch (e) {
    // handle errors gracefully
    console.error(e);
  }
}, MIN_DELAY);


            </script>

<style>
    .error-toaster {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 40%);
        visibility: hidden;
        transition: visibility 0s, opacity 0.5s ease;
        border:2px solid #070808a3;
        top:47%;
        width:20%;
        height:80px;
        font-size:20px;
        margin-left:-9.5%;
        background-color:white;
        color:black;
      }
    .error-toaster::after {
        content: "";
        position: absolute;
        top: 50%;
        right: -16px; /* Adjust as necessary */
        transform: translateY(-50%);
        border: 8px solid transparent;
        border-left-color: black;
    }

    .error-text {
        display: inline-block;
        padding: 0 10px;
    }
</style>
        </xpath>
    </template>

    <template id="custom_cart_lines" name="Custom Shopping Cart Lines"
        inherit_id="website_sale.cart_lines">
        <xpath expr="//div[@class='d-flex flex-column align-items-end']" position="before">
            <!-- Add your maximum order quantity field here -->
            <div class="form-group" style="visibility: hidden;">
                <label for="maximum_order_qty">Maximum Order Quantity</label>
                <div class="qtyMaxId1">
                    <t t-esc="line.product_id.maximum_order_qty" />
                </div>
            </div>

            <div id="errorToaster" class="error-toaster">
                 <span class="error-text">Warning </span>
            </div>

            <script type="text/javascript">

setTimeout(() => {
  try {
    const quantityElements = document.querySelectorAll('.quantity');
    const qtyId1Elements = document.querySelectorAll('.qtyMaxId1');

    quantityElements.forEach((quantityElement, index) => {
      const value = parseInt(qtyId1Elements[index].innerHTML);
      quantityElement.setAttribute('data-max', `${value}`);

      if (parseInt(quantityElement.value) > parseInt(value)) {
        quantityElement.value = `${value}`;
      }

      quantityElement.addEventListener('input', (event) => {
        const targetValue = event.target.value;
        if (targetValue === "" || targetValue === "0" || targetValue === null || targetValue === undefined || parseInt(targetValue) > value) {
          showErrorToast(`Warning: Maximum Order Quantity is`, value);
          event.target.value = `${value}`;
        }
      });
    });

    try {
      let subButton = document.getElementsByClassName("js_add_cart_json")[1];
      subButton.addEventListener('click', () => {
        let currentMinQty = document.getElementsByClassName("quantity")[0].getAttribute("data-max");
        let currentQty = document.getElementsByClassName("quantity")[0].value;
        if (parseInt(currentMinQty) === parseInt(currentQty)) {
          showErrorToast(`Warning: Maximum Order Quantity is`, parseInt(currentMinQty));
        }
      });
    } catch (e) {
      // handle errors gracefully
      console.error(e);
    }

  } catch (e) {
    // handle errors gracefully
    console.error(e);
  }
}, 100);

function showErrorToast(message, quantity = null) {
  const errorToaster = document.getElementById('errorToaster');
  errorToaster.innerHTML = ''; // Clear previous content

  // Create the message text node
  const messageTextNode = document.createTextNode(message);
  errorToaster.appendChild(messageTextNode);

  // If quantity is provided, create a span element and append it
  if (quantity !== null) {
    const quantitySpan = document.createElement('span');
    quantitySpan.style.color = 'red';
    quantitySpan.textContent = ` ${quantity}.`; // Add a space for readability
    errorToaster.appendChild(quantitySpan);
  }

  errorToaster.style.visibility = 'visible';

  setTimeout(() => {
    errorToaster.style.visibility = 'hidden';
  }, 5000); // 5 seconds timeout
}


            </script>
            <style>
                .error-toaster {
                    position: absolute;
                    bottom: 20px;
                    left: 50%;
                    transform: translateX(-50%);
                    padding: 10px 20px;
                    border-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0, 0, 0, 40%);
                    border:2px solid #070808a3;
                    visibility: hidden;
                    transition: visibility 0s, opacity 0.5s ease;
                    top:18%;
                    width:20%;
                    font-size:20px;
                    height:80px;
                    margin-left:-14%;
                    background-color:white;
                    color:black;
                  }
                .error-toaster::after {
                    content: "";
                    position: absolute;
                    top: 50%;
                    right: -16px; /* Adjust as necessary */
                    transform: translateY(-50%);
                    border: 8px solid transparent;
                    border-left-color: black;
                }

                .error-text {
                    display: inline-block;
                    padding: 0 10px;
                }

            </style>
        </xpath>
    </template>


</odoo>
